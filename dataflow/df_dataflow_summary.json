{
	"name": "df_dataflow_summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sqldatabase_payroll_data_2020",
						"type": "DatasetReference"
					},
					"name": "Sql2020Payroll"
				},
				{
					"dataset": {
						"referenceName": "ds_sqldatabase_payroll_data_2021",
						"type": "DatasetReference"
					},
					"name": "Sql2021Payroll"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sqldatabase_payroll_summary",
						"type": "DatasetReference"
					},
					"name": "SinkSqlPayrollSummaryTable"
				},
				{
					"dataset": {
						"referenceName": "ds_staging",
						"type": "DatasetReference"
					},
					"name": "SinkADLGen2Staging",
					"rejectedDataLinkedService": {
						"referenceName": "ls_data_lake",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "Sql2020U2021"
				},
				{
					"name": "FiscalYearFilter"
				},
				{
					"name": "TotalPaid"
				},
				{
					"name": "AggregateAgencyNameFiscalYear"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Sql2020Payroll",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Sql2021Payroll",
				"Sql2020Payroll, Sql2021Payroll union(byName: true)~> Sql2020U2021",
				"Sql2020U2021 filter(FiscalYear>=$dataflow_param_fiscalyear) ~> FiscalYearFilter",
				"FiscalYearFilter derive(TotalPaid = RegularGrossPaid + TotalOTPaid + TotalOtherPay) ~> TotalPaid",
				"TotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> AggregateAgencyNameFiscalYear",
				"AggregateAgencyNameFiscalYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SinkSqlPayrollSummaryTable",
				"AggregateAgencyNameFiscalYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> SinkADLGen2Staging"
			]
		}
	}
}